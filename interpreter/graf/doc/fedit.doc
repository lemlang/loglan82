
	FEDIT - a simple font editor for IBM PC
		a companion to IIUWGRAF graphics library

FEDIT allows to create and modify 8*8 pixel patterns. Such
patterns may be displayed as part of graphics screen image
via the "hascii" function.

Font tables can be prepared by FEDIT in two formats:

	- as an assembly subroutine,
	  delivering address of the font table
	  in the form suitable for passing to "hfont"
	- as an independent program,
	  setting up pointer to the font table in 
	  the location of interrupt vector 31.

The first format can be used to replace the standard font
usually found in ROM BIOS at location F000:FA6E. It is used
by "hascii" for drawing character codes 0 to 127. The subroutine
generated by FEDIT has to be linked together with the application.
This is "base 0" format.
FEDIT generates the subroutine with the name "hfont8". Should 
another name be desired (e.g. when font tables are to be switched
dynamically), it may changed by hand in the assembly source.

The second format is used when drawing characters from the
extended range 128 to 255. This font has to be loaded into
memory before execution of the application program that
uses it by invoking the program generated by FEDIT.
This is "base 128" format.
FEDIT generates this table as part of an independent program,
that sets up the vector address and exits via "terminate and
stay resident".
FEDIT and HGCGRAPHICS do not provide facilities for dynamic
switching of this extended font table.


For example,

		integer*2 iseg,ioffs
		call hfont8(iseg,ioffs)
		...
		call hascii(45)		; uses ROM BIOS
		call hascii(145)	; extended table
		...
		call hfont(iseg,ioffs)
		call hascii(45)		; uses FEDIT font
		call hascii(145)		; same extended table
		....
		call hfont(16#f000,16#fa6e)
		call hascii(45)		; ROM BIOS again
		call hascii(145)		; same extended table


FEDIT is a simple conversational program with few commands. The basic
idea is to have a table of 8*8 pixel patterns that can be modified
interactively. A single character can be brought out of the table for
editing and returned, possibly to a different position in the table.
There are two tables, one for character codes 0 through 127, the other
for codes 128 through 255. The first table is read-only. The second table
can be initialized by an already resident extended font table, loaded
from a FEDIT-created file or initialized as empty.  The second table can be
written out to file in one of two formats discussed above.

FEDIT commands are entered as single keystrokes selecting the commands
listed in a menu appearing on top of the screen.
Additional parameters, if any, are prompted for.

FEDIT commands:

<	low			redisplays the 0 to 127 table

>	high		redisplays the 128 to 255 table

i	init		initializes 128 to 255 table to all zeros

l	load		loads the 128 to 255 table from file;
				asks for the file name

d	dump		dumps the 128 to 255 table to file;
				asks for the file name;
				asks for base, which should be either 0 or
				128, indicating one of the two formats
				asks for target:
					f - ms fortran, ms pascal
					s - lattice c, s model
					p - lattice c, p model
					d - lattice c, d model
					l - lattice c, l model

e	edit		brings a character into the editing area
				asks for a character code (in decimal);
				during editing, cursor keys may be used
				to select pixel position, "INS" to set
				the pixel on, "DEL" to set it off, "END"
				to exit edit mode.

t	text		accepts a short text that will be displayed
				during the editing as an additional help
				for judgement of the quality of the appearance
				of currently edited character;
				asks for vspace & hspace : horizontal & vertical
				spacing between adjacent character boxes,
				then waits for a string (at most 40 chars).

p	put			saves the pattern in the editing buffer
				in the font table;
				asks for a code (in decimal) which should
				be in the range 128 through 255

q	quit		exits from FEDIT

FEDIT is not foolproof, e.g. it will not survive an attempt to load
a non-existing font file and it will overwrite an existing file
without warning if asked to.
